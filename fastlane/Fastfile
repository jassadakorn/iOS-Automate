# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.101.0"

default_platform :ios

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    ENV["CRASHLYTICS_API_TOKEN"] = ""
    ENV["CRASHLYTICS_BUILD_SECRET"] = ""
  end

  desc "Local setup required to work with the iOS project"
  lane :setup do
    install_xcode_plugin(github: 'https://github.com/neonichu/FixCode')
    fetch_certificates_dev
  end

  desc "Increment the app version patch"
  lane :bumpPatch do
    increment_version_number(bump_type: "patch")
  end

  desc "Increment the app version minor"
  lane :bumpMinor do
    increment_version_number(bump_type: "minor")
  end

  desc "Increment the app version major"
  lane :bumpMajor do
    increment_version_number(bump_type: "major")
  end

  desc "Fetches the development certificates and provisioning profiles to run the project on real devices"
  lane :fetch_certificates_dev do
    match(type: "development", readonly: true)
  end

  desc "Fetches the adhoc certificates and provisioning profiles compile the app for Crashlytics"
  lane :fetch_certificates_beta do
    match(type: "adhoc", readonly: true)
  end

  desc "Fetches the distribution certificates and provisioning profiles compile the app for AppStore distribution"
  lane :fetch_certificates_appstore do
    match(type: "appstore", readonly: true)
  end

  desc "Runs all the tests"
  lane :test do
  	cocoapods
    xcversion(version: "8")
    ENV['FASTLANE_EXPLICIT_OPEN_SIMULATOR'] = "2"
    scan(workspace: "BuildConfigurations.xcworkspace",
    	scheme: "BuildConfigurations_dev",
    	devices: ["iPhone 6s"],
    	clean: true,
    	skip_build: false,
    	use_clang_report_name: true)
  end

  desc "- Ensures a clean git status"
  desc "- Increment the build number"
  desc "- Build and sign the app"
  lane :build do |options|
    ensure_git_status_clean
    build_number = ENV['BUILD_ID']
    increment_build_number(build_number: build_number)
    gym(scheme: options[:scheme],
    toolchain: "com.apple.dt.toolchain.Swift_2_3",
    use_legacy_build_api: false)
  end

  desc "Submit a new Beta Build to Crashlytics"
  desc "This action does the following:"
  desc ""
  desc "- Build"
  desc "- Upload the ipa file to Crashlytics"
  desc "- Commit and push the version bump"
  lane :beta do
    fetch_certificates_beta
    cocoapods
    build(scheme: "BuildConfigurations_beta")
    deploy_beta
    commit_build_number()
  end

  desc "Deploy a new version to the App Store"
  desc "This action does the following:"
  desc ""
  desc "- Build"
  desc "- Upload the ipa file to Crashlytics"
  desc "- Commit and push the version bump"
  lane :production do
    fetch_certificates_appstore
    cocoapods
    build(scheme: "BuildConfigurations_prod")
    deploy_release
    commit_build_number()
  end

  lane :deploy_beta do
    version_number = get_version_number
    change_log = File.read("./changelog/#{version_number}.txt")
    crashlytics(
    api_token: ENV["CRASHLYTICS_API_TOKEN"],
    build_secret: ENV["CRASHLYTICS_BUILD_SECRET"],
    groups: ["groupName"],
    notes: change_log
    )
  end

  lane :deploy_release do
    deliver(force: true)
  end
end

after_all do |lane|
  # slack(
  #   message: "Successfully deployed new App Update."
  # )
  clear_derived_data
end

error do |lane, exception|
  # slack(
  #   message: exception.message,
  #   success: false
  # )
end

def commit_build_number()
  clean_build_artifacts
  build_number = ENV['BUILD_ID']
  version_number = get_version_number
  complete_version_number = version_string(version_number, build_number)
  commit_version_bump(message: "[ci skip][ci-skip] Deploying version: #{complete_version_number}")
  add_git_tag
  push_to_git_remote(
  remote: 'origin',         # optional, default: 'origin'
  local_branch: ENV['BRANCH_NAME'],  # optional, aliased by 'branch', default: 'master'
  remote_branch: ENV['BRANCH_NAME'], # optional, default is set to local_branch
  force: true,              # optional, default: false
  tags: true               # optional, default: true
  )
end

def version_string(version_number, build_number)
  "#{version_number} (#{build_number})"
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer